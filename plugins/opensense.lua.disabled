-- Plugin for read.lua
-- send sensor data to Open.sen.se
--
-- The plugin must be configured with a Open.sen.se API Key and the list of 
-- sensor ids to the corresponding fields.
--
-- The Open.sen.se plugin requires luasocket
-- http://luasocket.luaforge.net/
-- and JSON4Lua
-- http://json.luaforge.net/
--
local opensense = {
   -- edit opensense API Entpoint
   url = 'http://api.sen.se/events/?sense_key=',
   -- add opensense Write API Key here
   api_key = '',
   -- add a list of sensor ids. These are later mapped 
   -- to the ids for opensense   
   fields = {
      '{sensorid_1}',
      '{sensorid_2}',
      ...
   },
   -- add a list of corresponding feed_ids for the sensor ids above.
   ids = {
      '{feed_id for sensorid_1}',
      '{feed_id for sensorid_2}',
      ...
   }
}

local json  = require("json")
local http  = require("socket.http")
local ltn12 = require("ltn12")

function opensense:send(data, data_path) 
   local result = { }
   for i, v in ipairs(data) do
      for k, f in pairs(self.fields) do
         if f == v.id then
            local event = { }
            event.feed_id = self.ids[k]
            event.value = v.current_value
            event.timetag = v.datetime.date .. "T" .. v.datetime.time .. ".000+00:00"
            table.insert(result, event)
         end
      end   
   end

   local request_body = json.encode(result)
   
   local header = { 
      ["Content-Length"] = #request_body
   }

   local response, b, c, h = http.request{
      url     = self.url .. self.api_key,
      headers = header,
      method  = "POST",
      source  = ltn12.source.string(request_body)
   }

   if response ~= 1 then
      local datetime = datetime()
      logfile ("opensense_http.log", datetime.date .. " " .. datetime.time .. " opensense: " .. h, data_path)
   end
end

return opensense